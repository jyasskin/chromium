# Copyright (c) 2013 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/linux/pkg_config.gni")
import("//build/config/sysroot.gni")

config("sdk") {
  if (sysroot != "") {
    cflags = [ "--sysroot=" + sysroot ]
    ldflags = [ "--sysroot=" + sysroot ]

    # Need to get some linker flags out of the sysroot.
    ldflags += [ exec_script("sysroot_ld_path.py",
        [ rebase_path("//build/linux/sysroot_ld_path.sh", root_build_dir),
          sysroot ],
        "value") ]
  }
}

pkg_config("dridrm") {
  packages = [ "libdrm" ]
}

config("fontconfig") {
  libs = [ "fontconfig" ]
}

pkg_config("freetype2") {
  packages = [ "freetype2" ]
}

pkg_config("glib") {
  packages = [ "glib-2.0", "gmodule-2.0", "gobject-2.0", "gthread-2.0" ]
}

pkg_config("gtk") {
  # Gtk requires gmodule, but it does not list it as a dependency in some
  # misconfigured systems.
  packages = [ "gmodule-2.0", "gtk+-2.0", "gthread-2.0" ]
}

pkg_config("pangocairo") {
  packages = [ "pangocairo" ]
}

pkg_config("udev") {
  packages = [ "libudev" ]
}

config("x11") {
  # Don't bother running pkg-config for these X related libraries since it just
  # returns the same libs, and forking pkg-config is slow.
  libs = [
    "X11",
    "Xcomposite",
    "Xcursor",
    "Xdamage",
    "Xext",
    "Xfixes",
    "Xi",
    "Xrender",
    "Xss",
    "Xtst",
  ]
}

config("libresolv") {
  libs = [ "resolv" ]
}

pkg_config("gconf") {
  packages = [ "gconf-2.0" ]
  defines = [ "USE_GCONF" ]
}

pkg_config("gio_config") {
  packages = [ "gio-2.0" ]
  defines = [ "USE_GIO" ]
}

gio_output_h = "$root_gen_dir/library_loaders/libgio.h"
gio_output_cc = "$root_gen_dir/library_loaders/libgio_loader.cc"

action("make_gio_headers") {
  visibility = ":gio"

  script = "//tools/generate_library_loader/generate_library_loader.py"

  outputs = [ gio_output_h, gio_output_cc ]

  args = [
    "--name", "LibGioLoader",
    "--output-h", rebase_path(gio_output_h),
    "--output-cc", rebase_path(gio_output_cc),
    # TODO(brettw) convert ti "<gio/gio.h>" once GN doesn't mangle <>.
    "--header", "\"gio/gio.h\"",
    # Note GYP build exposes a variable linux_link_gsettings to control this,
    # which, if manually set to true, will disable dlopen() for this. Its not
    # clear this is needed, so here we just leave off.
    "--link-directly=0",
    "g_settings_new",
    "g_settings_get_child",
    "g_settings_get_string",
    "g_settings_get_boolean",
    "g_settings_get_int",
    "g_settings_get_strv",
    "g_settings_list_schemas",
  ]
}

source_set("gio") {
  direct_dependent_configs = [ ":gio_config" ]
  sources = [ gio_output_h, gio_output_cc ]
  deps = [ ":make_gio_headers" ]
}
