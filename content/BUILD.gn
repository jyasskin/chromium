# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//tools/grit/grit_rule.gni")

# Applied by targets internal to content.
config("content_implementation") {
  defines = [ "CONTENT_IMPLEMENTATION" ]
}

grit("resources") {
  source = "content_resources.grd"
}

# Stubs ------------------------------------------------------------------------

# TODO(brettw) remove this and add a proper dependency on blink once that
# target has been converted to GN. This config sets up the include directories
# so content can compile in the meantime.
#
# This corresponds to third_party/WebKit/public/blink_headers.gyp:blink_headers
config("blink_headers_stub_config") {
  include_dirs = [ "//third_party/WebKit" ]
}

# TODO(brettw) remove this and add a proper dependency on libjingle once that
# target has been converted to GN. This config sets up the include directories
# so content can compile in the meantime.
config("libjingle_stub_config") {
  include_dirs = [
    "//third_party/libjingle/overrides",
    "//third_party/libjingle/source",
    "//third_party/libyuv/include",
    "//third_party/usrsctp",


    "//third_party/webrtc/overrides",  # Must be before webrtc abd third_party.
    "//third_party/webrtc",
    "//third_party",
  ]

  defines = [
    "FEATURE_ENABLE_SSL",
    "FEATURE_ENABLE_VOICEMAIL",
    "EXPAT_RELATIVE_PATH",
    "GTEST_RELATIVE_PATH",
    "NO_MAIN_THREAD_WRAPPING",
    "NO_SOUND_SYSTEM",
  ]

  if (is_mac) {
    defines += [ "OSX" ]
  } else if (is_linux) {
    defines += [ "LINUX" ]
  } else if (is_android) {
    defines += [ "ANDROID" ]
  } else if (is_win) {
    libs = [ "secur32.lib", "crypt32.lib", "iphlpapi.lib" ]
  }

  if (is_posix) {
    defines += [ "POSIX" ]
  }
  if (is_chromeos) {
    defines += [ "CHROMEOS" ]
  }
}

# This config is a placeholder to set up the V8 include path while the V8 GN
# build is being worked on.
config("v8_stub_config") {
  include_dirs = [ "//v8/include" ]
}

config("widevine_stub_config") {
  # The real implementation does a copy rule to copy the header to the gen dir.
  include_dirs = [ "//third_party/widevine/cdm" ]
}
